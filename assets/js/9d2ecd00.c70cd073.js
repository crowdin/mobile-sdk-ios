"use strict";(self.webpackChunk_crowdin_mobile_sdk_ios_website=self.webpackChunk_crowdin_mobile_sdk_ios_website||[]).push([[594],{5680:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>b});var r=t(6540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),g=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},d=function(e){var n=g(e.components);return r.createElement(s.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=g(t),p=o,b=c["".concat(s,".").concat(p)]||c[p]||u[p]||i;return t?r.createElement(b,a(a({ref:n},d),{},{components:t})):r.createElement(b,a({ref:n},d))}));function b(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=p;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[c]="string"==typeof e?e:o,a[1]=l;for(var g=2;g<i;g++)a[g]=t[g];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},8097:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>g});var r=t(8168),o=(t(6540),t(5680));const i={},a="Debug and Logging",l={unversionedId:"guides/debug-and-logging",id:"guides/debug-and-logging",title:"Debug and Logging",description:'Crowdin iOS SDK provides detailed debug mode - "Logs" tab in the SDK Controls module and logging into XCode console.',source:"@site/docs/guides/debug-and-logging.md",sourceDirName:"guides",slug:"/guides/debug-and-logging",permalink:"/mobile-sdk-ios/guides/debug-and-logging",draft:!1,editUrl:"https://github.com/crowdin/mobile-sdk-ios/tree/master/website/docs/guides/debug-and-logging.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Screenshots Automation",permalink:"/mobile-sdk-ios/guides/screenshots-automation"},next:{title:"Swift UI Localization guide",permalink:"/mobile-sdk-ios/guides/swift-ui"}},s={},g=[],d={toc:g},c="wrapper";function u(e){let{components:n,...t}=e;return(0,o.yg)(c,(0,r.A)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"debug-and-logging"},"Debug and Logging"),(0,o.yg)("p",null,'Crowdin iOS SDK provides detailed debug mode - "Logs" tab in the ',(0,o.yg)("a",{parentName:"p",href:"/advanced-features/sdk-controls"},"SDK Controls")," module and logging into XCode console."),(0,o.yg)("p",null,"To enable console logging, add the following option to your ",(0,o.yg)("inlineCode",{parentName:"p"},"CrowdinSDKConfig"),":"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-swift"},".with(debugEnabled: true)\n")),(0,o.yg)("p",null,"Crowdin SDK collects log messages for all actions performed by the SDK (login/logout, language downloads, API calls). There is a possibility to set up a callback for these logs. This callback will return log text every time a new log is created. To subscribe to receive log messages, just add a new callback like this:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-swift"},'CrowdinSDK.setOnLogCallback { logMessage in\n   print("LOG MESSAGE - \\(logMessage)")\n}\n')))}u.isMDXComponent=!0}}]);