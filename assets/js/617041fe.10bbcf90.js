"use strict";(self.webpackChunk_crowdin_mobile_sdk_ios_website=self.webpackChunk_crowdin_mobile_sdk_ios_website||[]).push([[501],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=i,g=d["".concat(p,".").concat(m)]||d[m]||c[m]||r;return n?a.createElement(g,o(o({ref:t},u),{},{components:n})):a.createElement(g,o({ref:t},u))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[d]="string"==typeof e?e:i,o[1]=l;for(var s=2;s<r;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2599:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var a=n(7462),i=(n(7294),n(3905));const r={},o="Setup",l={unversionedId:"setup",id:"setup",title:"Setup",description:"To configure iOS SDK integration you need to:",source:"@site/docs/setup.mdx",sourceDirName:".",slug:"/setup",permalink:"/mobile-sdk-ios/setup",draft:!1,editUrl:"https://github.com/crowdin/mobile-sdk-ios/tree/master/website/docs/setup.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/mobile-sdk-ios/installation"},next:{title:"Real-Time Preview",permalink:"/mobile-sdk-ios/advanced-features/real-time-preview"}},p={},s=[{value:"Setup with AppDelegate",id:"setup-with-appdelegate",level:2},{value:"Swift",id:"swift",level:3},{value:"Objective-C",id:"objective-c",level:3},{value:"Setup with Info.plist",id:"setup-with-infoplist",level:2},{value:"Translations update interval",id:"translations-update-interval",level:2},{value:"Change locale programmatically",id:"change-locale-programmatically",level:2},{value:"Config options",id:"config-options",level:2},{value:"SwiftUI support",id:"swiftui-support",level:2},{value:"Apple Strings Catalog support",id:"apple-strings-catalog-support",level:2}],u={toc:s},d="wrapper";function c(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"setup"},"Setup"),(0,i.kt)("p",null,"To configure iOS SDK integration you need to:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Upload your localization files to Crowdin. If you have existing translations, you can upload them as well. You can use one of the following options:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://crowdin.github.io/crowdin-cli/"},"Crowdin CLI")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://store.crowdin.com/visual-studio-code"},"Crowdin VS Code Plugin")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/marketplace/actions/crowdin-action"},"Crowdin GitHub Action")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://support.crowdin.com/uploading-files/"},"and more")))),(0,i.kt)("li",{parentName:"ul"},"Set up Distribution in Crowdin."),(0,i.kt)("li",{parentName:"ul"},"Set up SDK and enable Over-The-Air Content Delivery feature.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Distribution")," is a CDN vault that mirrors the translated content of your project and is required for integration with iOS app."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://support.crowdin.com/content-delivery/"},"Creating a distribution in crowdin.com")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://support.crowdin.com/enterprise/content-delivery/"},"Creating a distribution in Crowdin Enterprise"))),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"The download of translations happens ",(0,i.kt)("strong",{parentName:"li"},"asynchronously")," after the start of the application. The downloaded translations will be used the next time the app is launched, otherwise the previously cached translations will be used (or local translations if no cache exists)."),(0,i.kt)("li",{parentName:"ul"},"The CDN feature does not update the localization files, if you want to add new translations to the localization files, you need to do it yourself."),(0,i.kt)("li",{parentName:"ul"},"Once the SDK receives the translations, they're stored on the device as application files for future sessions to minimize requests the next time the app is launched. The storage time can be configured using the ",(0,i.kt)("inlineCode",{parentName:"li"},"intervalUpdatesEnabled")," option."),(0,i.kt)("li",{parentName:"ul"},"CDN will cache all translations in the release for up to 1 hour and even if new translations are released in Crowdin, CDN may return them with a delay."))),(0,i.kt)("h2",{id:"setup-with-appdelegate"},"Setup with AppDelegate"),(0,i.kt)("h3",{id:"swift"},"Swift"),(0,i.kt)("p",null,"Open the ",(0,i.kt)("em",{parentName:"p"},"AppDelegate.swift")," file and add:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"import CrowdinSDK\n")),(0,i.kt)("p",null,"In the ",(0,i.kt)("inlineCode",{parentName:"p"},"application")," method add:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'let crowdinProviderConfig = CrowdinProviderConfig(hashString: "{distribution_hash}",\n  sourceLanguage: "{source_language}")\n\nCrowdinSDK.startWithConfig(crowdinSDKConfig, completion: {\n    // SDK is ready to use, put code to change language, etc. here\n})\n')),(0,i.kt)("h3",{id:"objective-c"},"Objective-C"),(0,i.kt)("p",null,"In the ",(0,i.kt)("em",{parentName:"p"},"AppDelegate.m")," add:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-objectivec"},"@import CrowdinSDK\n")),(0,i.kt)("p",null,"or"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-objectivec"},"#import<CrowdinSDK/CrowdinSDK.h>\n")),(0,i.kt)("p",null,"In the ",(0,i.kt)("inlineCode",{parentName:"p"},"application")," method add:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-objectivec"},'CrowdinProviderConfig *crowdinProviderConfig = [[CrowdinProviderConfig alloc] initWithHashString:@"" sourceLanguage:@""];\nCrowdinSDKConfig *config = [[[CrowdinSDKConfig config] withCrowdinProviderConfig:crowdinProviderConfig]];\n\n[CrowdinSDK startWithConfig:config completion:^{\n// SDK is ready to use, put code to change language, etc. here\n}];\n')),(0,i.kt)("p",null,"If you have a pure Objective-C project, you will need to take some additional steps:"),(0,i.kt)("p",null,"Add the following code to your Library Search Paths:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$(TOOLCHAIN_DIR)/usr/lib/swift/$(PLATFORM_NAME)\n")),(0,i.kt)("p",null,"Add ",(0,i.kt)("inlineCode",{parentName:"p"},"use_frameworks!")," to your Podfile."),(0,i.kt)("h2",{id:"setup-with-infoplist"},"Setup with Info.plist"),(0,i.kt)("p",null,"Open ",(0,i.kt)("em",{parentName:"p"},"Info.plist")," file and add:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"CrowdinDistributionHash")," - Crowdin CDN hash value for current project (String value)."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"CrowdinSourceLanguage")," - Source language code of your Crowdin project in the (",(0,i.kt)("a",{parentName:"p",href:"http://www.loc.gov/standards/iso639-2/php/English_list.php"},"ISO 639-1"),") format (String value)."),(0,i.kt)("p",null,"In AppDelegate you should call start method: ",(0,i.kt)("inlineCode",{parentName:"p"},"CrowdinSDK.start()")," for Swift, and ",(0,i.kt)("inlineCode",{parentName:"p"},"[CrowdinSDK start]")," for Objective-C."),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Using this setup method, you will not be able to set up additional ",(0,i.kt)("em",{parentName:"p"},"Screenshots")," and ",(0,i.kt)("em",{parentName:"p"},"Real-Time Preview")," project features.")),(0,i.kt)("h2",{id:"translations-update-interval"},"Translations update interval"),(0,i.kt)("p",null,"By default, SDK searches for new translation once per application load, but not more often than 15 minutes. You can update translations in application every defined interval. To enable this feature add pod ",(0,i.kt)("inlineCode",{parentName:"p"},"CrowdinSDK/IntervalUpdate")," to your pod file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"pod 'CrowdinSDK/IntervalUpdate'\n")),(0,i.kt)("p",null,"Then enable this option in ",(0,i.kt)("inlineCode",{parentName:"p"},"CrowdinSDKConfig"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},".with(intervalUpdatesEnabled: true, interval: {interval})\n")),(0,i.kt)("p",null,"Where ",(0,i.kt)("inlineCode",{parentName:"p"},"interval")," - defines translations update time interval in seconds. Minimum allowed interval is 15 minutes (900 seconds)."),(0,i.kt)("h2",{id:"change-locale-programmatically"},"Change locale programmatically"),(0,i.kt)("p",null,"By default, the SDK relies on the device locale. To change the SDK target language on the fly regardless of the device locale, use the following method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'CrowdinSDK.enableSDKLocalization(true, localization: "<language_code>")\n')),(0,i.kt)("p",null,"Where ",(0,i.kt)("inlineCode",{parentName:"p"},"<language_code>")," - target language code in ",(0,i.kt)("a",{parentName:"p",href:"http://www.loc.gov/standards/iso639-2/php/English_list.php"},"ISO 639-1")," format."),(0,i.kt)("h2",{id:"config-options"},"Config options"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Config option"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"),(0,i.kt)("th",{parentName:"tr",align:null},"Example"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"hashString")),(0,i.kt)("td",{parentName:"tr",align:null},"Distribution Hash"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'hashString: "7a0c1...o3b"'))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"sourceLanguage")),(0,i.kt)("td",{parentName:"tr",align:null},"Source language code in your Crowdin project. ",(0,i.kt)("a",{parentName:"td",href:"http://www.loc.gov/standards/iso639-2/php/English_list.php"},"ISO 639-1")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'sourceLanguage: "en"'))))),(0,i.kt)("h2",{id:"swiftui-support"},"SwiftUI support"),(0,i.kt)("p",null,"SwiftUI doesn't have automatic support yet. It will work only when you pass localised string using ",(0,i.kt)("inlineCode",{parentName:"p"},'NSLocalizedString("key", comment: "comment")'),".\nIt means that you will need to update all localised strings in SwiftUI application. For more comfortable usage you can use out String extension for localisation: ",(0,i.kt)("inlineCode",{parentName:"p"},'"key".cw_localized'),"."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'Text(NSLocalizedString("key", comment: "comment"))\n')),(0,i.kt)("p",null,"or"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'Text("key".cw_localized)\n')),(0,i.kt)("p",null,"After we add SwiftUI support, you will just need to remove the ",(0,i.kt)("inlineCode",{parentName:"p"},"cw_localized")," method call."),(0,i.kt)("h2",{id:"apple-strings-catalog-support"},"Apple Strings Catalog support"),(0,i.kt)("p",null,"The Crowdin SDK supports the ",(0,i.kt)("a",{parentName:"p",href:"https://store.crowdin.com/string_catalog"},"Apple Strings Catalog")," (",(0,i.kt)("inlineCode",{parentName:"p"},".xcstrings"),") format out of the box. It doesn't require any additional setup. Just upload your localization files to Crowdin, set up the distribution and start using the SDK."),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Only the CDN Content Delivery feature is available for the Apple Strings Catalog format. The Screenshots and Real-Time Preview features are not yet supported.")))}c.isMDXComponent=!0}}]);